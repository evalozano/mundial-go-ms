// Code generated by go-bindata.
// sources:
// data/geo.json
// data/hotels.json
// data/inventory.json
// data/locales.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGeoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x94\x91\x5f\x92\x9a\xe3\x99\xa2\x64\xa5\xa0\x64\xa8\xa4\x83\x10\xcf\x49\x2c\x51\xb2\x52\x30\x36\xd7\x33\xb7\x30\x33\x47\x16\xcf\xcf\x53\xb2\x52\xd0\x35\x34\x32\xd2\x33\x31\x34\x34\x02\x4b\xd4\xea\xe0\x31\xd5\x08\x87\xa9\xa6\x26\x38\x4c\x35\x30\x30\x25\x6c\xaa\x31\x0e\x53\x8d\x71\x9a\x6a\x6e\x48\xd8\x54\x13\xec\xa6\x5a\x1a\x9b\x61\x37\xd5\xd8\xd2\xd8\x80\xb0\xa9\xa6\xb8\xdc\x6a\x88\x2b\x5c\x2d\xa0\x6e\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\xb6\xc9\xa7\x0d\xb1\x01\x00\x00")

func dataGeoJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataGeoJson,
		"data/geo.json",
	)
}

func dataGeoJson() (*asset, error) {
	bytes, err := dataGeoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/geo.json", size: 433, mode: os.FileMode(420), modTime: time.Unix(1528317372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHotelsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x4b\x4f\xdb\x40\x10\x80\xef\xfc\x8a\x51\x2e\x1c\x8a\xa9\xbd\x0f\x3f\xb8\xa5\xa8\x5c\x0a\x25\x02\xa1\x1e\xaa\x1e\xc6\xf6\x42\x56\x71\x76\xa3\x7d\x50\xb9\x15\xff\xbd\xb2\xa1\x6d\x88\xed\x25\xaa\xaa\x8a\xe6\x10\x45\xde\xd9\x71\x66\xbf\x6f\x66\x3f\x1f\x00\x00\x7c\xef\xbf\xbb\xcf\x4c\xd6\xb3\x13\x98\x25\xb3\xa3\xe0\x23\x85\x6b\xd1\x3d\xfc\x80\xb7\x02\x16\x68\xbc\xdd\x5e\xdd\x2c\xb5\x12\x1f\xfd\xba\x14\xa6\x0b\x7a\x93\x41\x9e\x12\x20\x24\x8d\x78\x1a\xe5\xcf\x12\xd5\xc2\x56\x46\x6e\x9c\xd4\xaa\x0b\x9d\x43\x42\xa2\xb5\x54\xde\x09\xf8\x8a\xcd\x0a\x6e\x8d\x5e\xc3\x65\xd3\xae\x37\xb2\x82\xf9\xbd\x38\xde\xde\x8c\x75\x6d\x84\xb5\xb3\x93\xad\x02\xfa\x05\xeb\x8c\x10\xee\xf7\x3f\xc8\xb6\x76\x6d\x07\x3c\x55\x71\xd3\x48\x67\xf1\xb1\x0e\x85\x2d\xee\x46\x57\xd2\xb5\x7d\xb5\x06\xad\xd2\x35\x1a\xbb\x92\x2d\xac\x0c\xb6\xc3\xbc\xe8\xfa\x94\x57\x37\x83\x24\xda\x2b\x67\xfa\x3c\x57\xde\xca\xc1\x4b\x36\xda\x3a\x6c\x4e\x75\xdd\xef\xa7\x9c\x51\x16\xef\xc6\x34\xe8\x66\x27\xc0\xe8\x31\x8b\x19\x65\x6c\x77\xb5\x3f\x43\x5a\x1c\x17\x8c\x17\x31\xf9\xb5\xf8\xd0\xff\x7a\x38\x1a\x47\x4d\xc6\xb8\x9e\x23\x2c\xbc\x72\x1a\xae\x84\x75\xe8\x0d\x2a\x17\x06\x5c\xe4\x39\x10\xca\xa2\x94\x45\x8c\x05\x01\xf3\x21\xdf\xa7\xf3\xbf\x10\xdf\x96\xb5\x57\x68\x74\xbd\x43\x61\x7f\xd2\x24\x4c\x9a\x9a\x1a\xae\xdd\x14\xdf\x6b\x54\x70\x66\x50\x55\xd2\x56\x7a\x12\xed\xe9\x3c\x80\xf6\x46\x49\x27\xba\x77\xa0\x13\x36\x8c\xb8\x60\x49\x4c\x03\x84\x69\xc6\xf3\x49\xc2\x69\x92\x92\x64\x4f\xc2\x74\x8c\xf0\xa5\xad\xd0\xc0\xb9\xf6\xea\x4e\xc0\x69\xe3\xcb\x17\x1a\x38\x8e\x7b\xbe\x3c\x8b\xf2\x2c\xc8\x97\x64\xe1\x06\x06\x6d\x80\x16\x3f\x63\xca\x16\x4a\x6f\x21\x21\xdc\xbe\x4d\x28\x7f\x0c\x3f\x93\x76\xe9\xa2\xb9\x11\x0a\xff\xac\xdf\x93\xb0\x05\xef\x7c\x03\xf7\x68\xe0\x42\x1b\xbb\xd2\x83\x26\x7e\x85\xed\x9e\x90\xa4\xe0\x93\x32\x50\x9e\xc5\xf1\x9e\x32\xb0\x31\x19\xde\xab\xbb\x46\xda\x25\x2c\x7c\x09\x0b\x23\x55\x25\x40\xdf\xc2\x27\x6c\xc4\x0b\x73\xbd\xa0\x39\x30\xce\xa3\x38\x8e\x78\xfe\xbf\x6b\x41\x18\xbc\x3e\x33\xba\x29\xc1\x43\x62\xa4\x81\x29\x41\x53\x9e\xd2\x3d\xc5\xe0\xa3\x53\xe2\xf0\xda\x37\x8d\xbc\x47\x75\x68\x3b\x3b\xf6\xb6\x21\x0b\x5f\x02\x64\xe4\x16\x18\xd8\x40\x46\x6c\xf8\x4b\x26\xf0\xc1\x91\x3e\x57\x21\xe5\x70\x2e\x1c\x2c\x74\x29\xea\x36\x70\x63\xfc\x63\x11\x8a\x49\x11\x68\x91\x73\x9e\x4c\x8a\x90\xf1\xb4\xe0\xbb\x22\x1c\x7c\x39\xf8\x11\x00\x00\xff\xff\x37\x99\x2f\xd9\xff\x09\x00\x00")

func dataHotelsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataHotelsJson,
		"data/hotels.json",
	)
}

func dataHotelsJson() (*asset, error) {
	bytes, err := dataHotelsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hotels.json", size: 2559, mode: os.FileMode(420), modTime: time.Unix(1528317869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataInventoryJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x94\x91\x5f\x92\x9a\xe3\x99\xa2\x64\xa5\xa0\x64\xa8\xa4\x83\x10\x4f\xce\x4f\x49\x05\x09\x06\x39\x3a\x7b\x23\x8b\x67\xe6\xb9\x24\x96\x80\x65\x8c\x0c\x0c\x4d\x75\x0d\x4c\x74\x0d\x2c\x91\xe5\xf3\x4b\x4b\xd0\x15\x18\x1a\x20\x2b\x28\xca\xcf\xcf\x0d\xa9\x2c\x00\xa9\x40\x38\x43\x41\x41\x29\x29\x3f\x3f\x3b\x31\x29\x27\x35\x08\xa2\xdb\xd0\xc0\x52\xcf\xc0\x40\x07\x59\x05\xcc\x49\xde\x7e\xee\x4a\x28\x12\x29\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\x60\xf9\xcc\xbc\x74\x85\xe2\xcc\xaa\xd4\x14\x85\xa4\xd4\x14\x54\xa5\x25\xf9\x25\x89\x39\xb8\xad\x80\x4b\x7b\xe6\x25\xe7\x94\x16\x67\x96\x81\xd5\x19\x19\xeb\x19\x9a\xc3\x95\xd5\x82\x59\xb5\x3a\x78\x42\xd2\x68\x50\x85\xa4\x31\xce\x90\x0c\xf4\xc3\x1b\x90\x81\xa5\xa9\xa9\x79\x44\x85\x24\xa6\x15\xd8\x43\xd2\xd4\x58\xcf\xc0\x92\x94\x90\x34\x1e\x54\x21\x39\xd8\xd3\x24\x57\x2c\x17\x20\x00\x00\xff\xff\x34\xed\xf5\xf8\xe1\x03\x00\x00")

func dataInventoryJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataInventoryJson,
		"data/inventory.json",
	)
}

func dataInventoryJson() (*asset, error) {
	bytes, err := dataInventoryJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/inventory.json", size: 993, mode: os.FileMode(420), modTime: time.Unix(1528314405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLocalesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x4b\xf4\x40\x10\x86\xfb\xfb\x15\x2f\xa9\xf3\x7d\x20\x88\x85\x9d\x60\x63\x71\x20\x04\x2b\xb1\x98\xec\x4e\x2e\x43\xe6\x66\xe3\xec\xae\x67\x10\xff\xbb\x6c\xae\xd0\x29\xa6\x78\xde\xe1\x61\xde\xd7\x03\x00\x7c\xed\xbb\x4d\x37\xa7\xc2\xfa\x14\xbb\x7b\x74\x37\x5d\xff\xcb\x35\x05\x52\x6e\x98\xed\x2f\x8f\x9c\x83\xcb\x5a\x24\x59\x0b\x1f\x70\xf7\xef\x2c\x56\x0b\xe3\x42\xba\x60\xf2\x74\xc6\x8b\x49\x32\x0c\xef\x95\x9c\x41\x16\x71\x8b\xeb\x4d\xbe\xe6\x84\x63\x35\xc1\x91\x8b\x27\xe4\x42\x4d\xd6\xa3\xcc\x92\xa1\xf5\xb3\xfa\x86\xfd\x2b\x44\xce\x72\x32\x8e\x18\x37\x3c\xcf\xa2\xb2\xae\x8c\xa1\x90\x87\x05\x13\x53\xa9\xce\x19\x64\x20\x2f\x79\xc3\x54\xdd\xa4\x31\x84\xa4\xca\xa1\x59\x21\x86\x32\x33\x34\x8d\xe3\xd6\x43\x2c\x68\x8d\x62\x27\x5c\x92\x2f\x4d\x3b\x90\x7e\x50\x4c\x8e\x47\x52\xf9\xdf\xed\x3d\xbf\x0f\x6f\x87\x9f\x00\x00\x00\xff\xff\x84\x3e\x09\x90\x28\x01\x00\x00")

func dataLocalesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocalesJson,
		"data/locales.json",
	)
}

func dataLocalesJson() (*asset, error) {
	bytes, err := dataLocalesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locales.json", size: 296, mode: os.FileMode(420), modTime: time.Unix(1528011507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/geo.json": dataGeoJson,
	"data/hotels.json": dataHotelsJson,
	"data/inventory.json": dataInventoryJson,
	"data/locales.json": dataLocalesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"geo.json": &bintree{dataGeoJson, map[string]*bintree{}},
		"hotels.json": &bintree{dataHotelsJson, map[string]*bintree{}},
		"inventory.json": &bintree{dataInventoryJson, map[string]*bintree{}},
		"locales.json": &bintree{dataLocalesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

