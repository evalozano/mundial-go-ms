// Code generated by go-bindata.
// sources:
// data/geo.json
// data/inventory.json
// data/locales.json
// data/pubs.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGeoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x54\x50\x9a\xe4\x99\xa2\x64\xa5\xa0\x64\xa8\xa4\x83\x10\xcd\x49\x2c\x51\xb2\x52\x30\x36\xd7\x33\xb7\x30\x33\x47\x16\xcf\xcf\x53\xb2\x52\xd0\x35\x34\x32\xd2\x33\x31\x34\x34\x02\x4b\xd4\xea\xe0\x34\xd3\x08\x87\x99\xa6\x26\x38\xcc\x34\x30\x30\x25\x64\xa6\x31\x0e\x33\x8d\x71\x9a\x69\x6e\x48\xc8\x4c\x13\xec\x66\x5a\x1a\x9b\x61\x37\xd3\xd8\xd2\xd8\x80\x90\x99\xa6\xb8\xdc\x69\x88\x2b\x3c\x2d\xa0\xee\xe4\x8a\xe5\x02\x04\x00\x00\xff\xff\x83\x64\xd9\x5e\xa7\x01\x00\x00")

func dataGeoJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataGeoJson,
		"data/geo.json",
	)
}

func dataGeoJson() (*asset, error) {
	bytes, err := dataGeoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/geo.json", size: 423, mode: os.FileMode(420), modTime: time.Unix(1528318938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataInventoryJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x92\x41\xeb\x82\x30\x18\x87\xef\xfb\x14\x2f\x3b\xeb\x9f\x4d\xff\x45\x7a\x0e\x22\x22\x2b\xf0\x16\x1d\x4c\xdf\xc3\x20\xdd\x98\xd3\x8a\xf0\xbb\xc7\x94\x75\x08\x21\xba\x78\xe8\xfa\x3c\x8c\x1f\x0f\x7b\x8f\x04\xe0\x41\x00\x00\xa8\x6a\xce\xeb\x82\xc6\x40\x39\xf5\x06\x92\xcb\x02\x2d\x48\x77\x7b\x87\x44\xb5\xcc\x4c\x0f\x03\xc6\x17\x3e\x9b\xfb\x2c\x72\x4e\x36\xe6\x5d\xf2\xc0\x49\x2d\x65\x99\xde\x95\xb5\xc3\x9e\x65\xd8\x0a\xbc\xd2\x18\x38\x8b\xfe\x18\xf3\x1c\x77\xbb\x9b\x64\x45\x5f\xb0\xc0\x3a\xd7\x42\x19\x21\x2b\xeb\xb6\xd9\x4d\x94\x4d\x09\x33\x50\x28\xd5\x05\xc1\x48\xd0\x58\xa3\x6e\x91\xf6\x4f\x3a\x02\xd0\x79\x23\x79\xc1\xf4\x79\xe1\x68\xde\x21\xf9\x58\xc7\xd9\xd7\x79\xe1\xf4\x79\x9c\x4f\xf7\x7b\xff\xbf\x73\x9c\xe4\x44\x9e\x01\x00\x00\xff\xff\xc7\xce\x70\x55\x7f\x03\x00\x00")

func dataInventoryJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataInventoryJson,
		"data/inventory.json",
	)
}

func dataInventoryJson() (*asset, error) {
	bytes, err := dataInventoryJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/inventory.json", size: 895, mode: os.FileMode(420), modTime: time.Unix(1528388707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLocalesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x31\x0e\xc2\x30\x0c\x05\xd0\xbd\xa7\xf8\xca\x5c\x90\x58\x18\xd8\x60\xe3\x0c\x88\x21\x49\x5d\x35\xc2\x4d\xaa\xc4\x16\x54\x88\xbb\x23\x77\x01\x0f\x1e\x9e\xfd\xf5\x6f\x1d\x00\xbc\xb7\x6d\xe3\x16\x0d\xd7\xc1\x9d\xe0\x0e\xae\xff\x29\x97\xe8\x99\x8c\x29\xff\xfb\x40\x2d\xd6\xb4\x48\x2a\xd9\x8e\x67\x1c\x77\x73\xca\x2a\x84\xa7\xe7\x07\xc6\x5a\x66\x5c\xb4\xa1\x89\xb7\x9f\x1e\x32\xa5\x06\xd6\x97\xd6\x15\x8b\x06\x8c\xe4\x45\x2b\x35\xf8\x0c\x5f\xa5\xad\x18\xb5\xe6\x64\x86\x58\x98\x29\x5a\x0e\x29\x43\x26\x02\x97\x10\xd6\xbd\xdb\xfa\x3f\xdd\xbd\xfb\x06\x00\x00\xff\xff\x0d\x78\x89\xe4\xbe\x00\x00\x00")

func dataLocalesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocalesJson,
		"data/locales.json",
	)
}

func dataLocalesJson() (*asset, error) {
	bytes, err := dataLocalesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locales.json", size: 190, mode: os.FileMode(420), modTime: time.Unix(1528389287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPubsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x4d\x4f\xdc\x3c\x10\x80\xef\xfc\x8a\xd1\x5e\x38\xbc\x84\x37\xf1\x47\x3e\xb8\x6d\x51\xb9\x14\xca\x0a\x84\x7a\xa8\x7a\x98\x24\x86\xb5\x36\x6b\xaf\xfc\x41\x95\x56\xfc\xf7\x2a\x81\x96\x65\x93\x98\x55\x55\x55\x74\x0f\xab\x28\x1e\x4f\x6c\x3f\xcf\x8c\x3f\x1f\x00\x00\x7c\xef\xff\xbb\xdf\x4c\xd6\xb3\x13\x98\x25\xb3\xa3\xe7\x57\x0a\xd7\xa2\x7b\xf9\x01\x6f\x05\x2c\xd0\x78\xbb\x3d\xba\x59\x6a\x25\x3e\xfa\x75\x29\x4c\x17\xf4\x5f\x06\x79\x4a\x80\x90\x34\xe2\x69\x94\xbf\x48\x54\x0b\x5b\x19\xb9\x71\x52\xab\x2e\x74\x0e\x09\x89\xd6\x52\x79\x27\xe0\x2b\x36\x2b\xb8\x35\x7a\x0d\x97\x4d\xbb\xde\xc8\x0a\xe6\xf7\xe2\x78\x7b\x32\xd6\xb5\x11\xd6\xce\x4e\xb6\x56\xdb\x0f\x58\x67\x84\x70\xcf\x2b\xc8\xb6\x66\x6d\x07\x3c\xed\xe2\xa6\x91\xce\xe2\xe3\x3e\x14\xb6\xb8\x1b\x5d\x49\xd7\xf6\xbb\x35\x68\x95\xae\xd1\xd8\x95\x6c\x61\x65\xb0\x1d\xe6\x45\xd7\xa7\xbc\xba\x19\x24\xd1\x5e\x39\xd3\xe7\xb9\xf2\x56\x0e\x3e\xb2\xd1\xd6\x61\x73\xaa\xeb\x7e\x3e\xe5\x8c\xb2\x78\x37\xa6\x41\x37\x3b\x01\x46\x8f\x59\xcc\x28\x63\xbb\xa3\xfd\x19\xd2\xe2\xb8\x60\xbc\x88\xc9\xaf\xc1\x87\xfe\xe9\xe1\x68\x9c\x2b\x19\xe3\x7a\x8e\xb0\xf0\xca\x69\xb8\x12\xd6\xa1\x37\xa8\x5c\x18\x70\x91\xe7\x40\x28\x8b\x52\x16\x31\x16\x04\xcc\x87\x7c\x9f\xce\xff\x42\x7c\x5b\xd6\x5e\xa1\xd1\xf5\x0e\x85\xfd\x49\x93\x30\x69\x6a\x6a\xb8\x76\x53\x7c\xaf\x51\xc1\x99\x41\x55\x49\x5b\xe9\x49\xb4\xa7\xf3\x00\xda\x1b\x25\x9d\xe8\xbe\x81\x4e\xd8\x30\xe2\x82\x25\x31\x0d\x10\xa6\x19\xcf\x27\x09\xa7\x49\x4a\x92\x3d\x09\xd3\x31\xc2\x97\xb6\x42\x03\xe7\xda\xab\x3b\x01\xa7\x8d\x2f\x5f\x29\xe0\x38\xee\xf9\xf2\x2c\xca\xb3\x20\x5f\x92\x85\x0b\x18\xb4\x01\x5a\xfc\x8c\x29\x5b\x28\xbd\x85\x84\x70\xfb\x7f\x42\xf9\x63\xf8\x99\xb4\x4b\x17\xcd\x8d\x50\xf8\x7b\xf5\x9e\x84\x2d\x78\xe7\x1b\xb8\x47\x03\x17\xda\xd8\x95\x1e\x14\xf1\x1b\x2c\xf7\x84\x24\x05\x9f\x94\x81\xf2\x2c\x8e\xf7\x94\x81\x8d\xc9\xf0\x5e\xdd\x35\xd2\x2e\x61\xe1\x4b\x58\x18\xa9\x2a\x01\xfa\x16\x3e\x61\x23\x5e\xe9\xeb\x05\xcd\x81\x71\x1e\xc5\x71\xc4\xf3\x7f\x5d\x0b\xc2\xe0\xed\x99\xd1\x75\x09\x1e\x12\x23\x0d\x74\x09\x9a\xf2\x94\xee\x29\x06\x1f\xed\x12\x87\xd7\xbe\x69\xe4\x3d\xaa\x43\xdb\xd9\xb1\xb7\x0d\x59\xf8\x12\x20\x23\xb7\xc0\xc0\x06\x32\x62\xc3\x1f\x32\x81\x0f\x8e\xf4\xa5\x0a\x29\x87\x73\xe1\x60\xa1\x4b\x51\xb7\x81\x1b\xe3\x2f\x8b\x50\x4c\x8a\x40\x8b\x9c\xf3\x64\x52\x84\x8c\xa7\x05\xdf\x15\xe1\xe0\xcb\xc1\x8f\x00\x00\x00\xff\xff\xaf\x9e\x7b\x46\xec\x09\x00\x00")

func dataPubsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataPubsJson,
		"data/pubs.json",
	)
}

func dataPubsJson() (*asset, error) {
	bytes, err := dataPubsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/pubs.json", size: 2540, mode: os.FileMode(420), modTime: time.Unix(1528318938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/geo.json": dataGeoJson,
	"data/inventory.json": dataInventoryJson,
	"data/locales.json": dataLocalesJson,
	"data/pubs.json": dataPubsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"geo.json": &bintree{dataGeoJson, map[string]*bintree{}},
		"inventory.json": &bintree{dataInventoryJson, map[string]*bintree{}},
		"locales.json": &bintree{dataLocalesJson, map[string]*bintree{}},
		"pubs.json": &bintree{dataPubsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

