// Code generated by go-bindata.
// sources:
// data/geo.json
// data/inventory.json
// data/locales.json
// data/pubs.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGeoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x54\x50\x9a\xe4\x99\xa2\x64\xa5\xa0\x64\xa8\xa4\x83\x10\xcd\x49\x2c\x51\xb2\x52\x30\x31\xd6\x33\x31\x30\x31\x46\x16\xcf\xcf\x53\xb2\x52\x30\xb6\xd4\xb3\x34\x31\xb5\x04\x0b\xd7\xea\xe0\x34\xd1\x08\x87\x89\xc6\xe6\x58\x4d\x34\x33\x34\x23\x64\xa2\x31\x76\x13\x0d\x8d\x0c\xb1\x9a\x68\x6c\x6a\x4e\xc8\x44\x13\x5c\x26\x9a\x61\x37\xd1\xcc\x94\x90\x89\xa6\x58\x4d\x34\xb6\xb4\x30\xc5\x6a\xa2\xb9\x29\xd4\xd7\x5c\xb1\x5c\x80\x00\x00\x00\xff\xff\x79\x34\x56\xc8\x9d\x01\x00\x00")

func dataGeoJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataGeoJson,
		"data/geo.json",
	)
}

func dataGeoJson() (*asset, error) {
	bytes, err := dataGeoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/geo.json", size: 413, mode: os.FileMode(420), modTime: time.Unix(1528542737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataInventoryJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\xcd\x4a\x03\x31\x14\x46\xf7\x79\x8a\x8f\xbb\x9e\xca\xcc\xd8\x56\xed\x2e\xd4\x11\x06\x7f\x0a\x31\xae\xc4\x45\xdb\xb9\x8b\x80\x6d\x42\x9a\x54\x45\xfa\xee\x32\x2d\x51\x68\x05\x11\x1c\xbb\x3d\x87\xcb\xe5\xf0\x3d\x0a\xe0\x5d\x00\x00\xb9\x38\xab\x1b\x1a\x81\x0a\xca\x76\x64\x6e\x1b\x6e\xc1\x58\x5e\x55\xba\x52\xb5\x4c\xc2\x2c\x2f\xa7\x61\xab\xca\xbc\x38\xef\xe5\xc3\x5e\x7e\x91\x9c\x8d\x61\x5f\x16\x65\x92\x2e\xce\xf4\x9b\x6b\xe5\xee\x29\x40\x9e\xd7\x86\x5f\x68\x84\xfe\xc9\x20\x4b\xf0\xeb\x33\x7d\xb2\x86\x57\x73\x6f\x5c\x30\x76\xd9\xaa\xdb\xe9\xab\x59\xc4\x05\x06\x70\x6c\xdd\x33\x23\x58\x78\x5e\xb1\x5f\x33\x6d\x4f\x36\x02\xd8\x64\xdf\xf4\x95\xfb\x7d\xaa\xba\xd7\xf2\x41\xc9\x3b\xdd\x71\xe0\xd9\x41\xa0\xaa\x7e\x0c\x2c\xf2\x5f\x17\x9e\x1e\x2c\x38\x19\x5f\x6b\x59\xdf\xfc\xff\x80\x93\x0e\x06\xec\x1f\x29\x6f\xf8\xf7\x79\xe2\x49\x7c\x04\x00\x00\xff\xff\xa6\x60\xe0\x9a\x83\x03\x00\x00")

func dataInventoryJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataInventoryJson,
		"data/inventory.json",
	)
}

func dataInventoryJson() (*asset, error) {
	bytes, err := dataInventoryJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/inventory.json", size: 899, mode: os.FileMode(420), modTime: time.Unix(1528541165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLocalesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x31\xce\xc2\x30\x0c\x05\xe0\xbd\xa7\x78\xca\xdc\xff\x97\x58\x18\xd8\x18\x39\x03\x62\x48\x52\x57\x8d\x70\x93\x2a\xb1\x05\x11\xe2\xee\xc8\x5d\xc0\x83\x87\xcf\x7e\x7a\xd7\x01\x00\x5e\xfb\xb6\x71\x9b\x86\xcb\xe4\x4e\x70\x07\x37\x7e\x95\x4b\xf4\x4c\xc6\x94\x7f\x7d\xa2\x16\x6b\xda\x24\x95\x6c\xc7\x33\x8e\x7f\x6b\xca\x2a\x84\x87\xe7\x3b\xe6\x5a\x56\x04\x6d\x68\xe2\xed\x67\x84\x2c\xa9\x81\xf5\xa9\xb5\x63\xd3\x80\x99\xbc\x68\xa5\x06\x9f\xe1\xab\xb4\x8e\x59\x6b\x4e\x66\x88\x85\x99\xa2\xe5\x90\x32\x64\x21\x70\x09\xa1\xff\xbb\xbd\xff\x3d\xdc\x86\x4f\x00\x00\x00\xff\xff\x9a\x7c\xe3\x58\xbe\x00\x00\x00")

func dataLocalesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocalesJson,
		"data/locales.json",
	)
}

func dataLocalesJson() (*asset, error) {
	bytes, err := dataLocalesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locales.json", size: 190, mode: os.FileMode(420), modTime: time.Unix(1528540938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPubsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x95\x3b\x6f\xdb\x30\x10\x80\x77\xff\x8a\x83\x96\x0c\x8d\x5c\x89\x0f\x3d\xbc\xb9\x41\xbb\xd4\x69\x0c\x07\x41\x87\xa2\xc3\xc9\xa2\x63\xc2\x32\x69\xf0\xe1\x42\x2d\xf2\xdf\x0b\x2b\x69\xe3\x58\xb2\x62\x14\x1d\xdc\x6a\x10\x04\xde\xf1\x44\xf2\xfb\x48\x7e\x19\x00\x00\xfc\x68\xde\xbb\x27\x90\x65\x30\x82\x20\x0e\x2e\x9f\x9b\x14\xae\xc5\xae\xf1\x23\x2e\x04\x4c\xd1\x78\xbb\x1f\xdd\x2c\xb5\x12\x9f\xfc\xba\x10\x66\x97\xf4\x26\x85\x2c\x21\x40\x48\x12\xf2\x24\xcc\x5e\x14\x2a\x85\x9d\x1b\xb9\x71\x52\xab\x5d\xea\x18\x62\x12\xae\xa5\xf2\x4e\xc0\x37\xac\x56\xb0\x30\x7a\x0d\x37\x55\xbd\xde\xc8\x39\x8c\xb7\x62\xb8\xdf\x19\xcb\xd2\x08\x6b\x83\xd1\xde\x68\x9b\x80\x75\x46\x08\xf7\x3c\x82\x74\xaf\xd7\x7e\xc2\xd3\x2c\xee\x2a\xe9\x2c\x3e\xce\x43\x61\x8d\x87\xd9\x73\xe9\xea\x66\xb6\x06\xad\xd2\x25\x1a\xbb\x92\x35\xac\x0c\xd6\xed\xba\xe8\x9a\x92\xb3\xbb\x56\x11\xed\x95\x33\x4d\x9d\x99\xb7\xb2\xf5\x93\x8d\xb6\x0e\xab\x2b\x5d\x36\xfd\x29\x67\x94\x45\x87\x39\x15\xba\x60\x04\x8c\x0e\x59\xc4\x28\x63\x87\xd1\x66\x0d\x69\x3e\xcc\x19\xcf\x23\xf2\x3b\xf8\xd0\x7c\x3d\x5c\x76\x73\x25\x5d\x5c\x27\x08\x53\xaf\x9c\x86\x99\xb0\x0e\xbd\x41\xe5\xfa\x01\xe7\x59\x06\x84\xb2\x30\x61\x21\x63\xbd\x80\x79\x9b\xef\xd3\xfa\x5f\x8b\xef\xcb\xd2\x2b\x34\xba\x3c\xa0\x70\x3a\x69\xf2\xff\x91\xa6\x29\xcf\x8e\x92\x4e\xe2\x84\xc4\x27\x92\xa6\x5d\xa4\x6f\xec\x1c\x0d\x4c\xb4\x57\xf7\x02\xae\x2a\x5f\xbc\xb2\x91\xa3\xa8\xe1\xcc\xd3\x30\x4b\x7b\x39\x93\xb4\x7f\x23\x83\x36\x40\xf3\x5f\x39\x45\x0d\x85\xb7\x10\x13\x6e\xdf\xc6\x94\x3f\xa6\x7f\x90\x76\xe9\xc2\xb1\x11\x0a\xff\x6c\xdf\xc7\xfd\x36\xbc\xf3\x15\x6c\xd1\xc0\xb5\x36\x76\xa5\x5b\x88\xcf\x50\x86\x98\xc4\x39\x3f\x2a\x03\xe5\x69\x14\x9d\x28\x03\xeb\x92\xe1\xbd\xba\xaf\xa4\x5d\xc2\xd4\x17\x30\x35\x52\xcd\x05\xe8\x05\x7c\xc6\x4a\xbc\x72\xbe\xe7\x34\x03\xc6\x79\x18\x45\x21\xcf\xfe\x75\x2d\x08\x83\xf3\x33\x23\x67\x71\xc4\xfb\xc4\x48\x7a\x4e\x09\x9a\xf0\x84\x9e\x28\x06\xef\x3c\x25\x2e\x6e\x7d\x55\xc9\x2d\xaa\x0b\xbb\xb3\xe3\x64\x1b\xd2\xfe\xcb\x80\x74\xdc\x06\x2d\x1b\x48\x87\x0d\x7f\xc9\x04\xde\x5a\xd2\x97\x2a\x24\x1c\x26\xc2\xc1\x54\x17\xa2\xac\xe1\xd6\x9d\x89\x08\xf9\x51\x11\x68\x9e\x71\x1e\x1f\x15\x21\xe5\x49\xce\x0f\x45\x18\x7c\x1d\xfc\x0c\x00\x00\xff\xff\xf2\xed\x38\x17\xf4\x09\x00\x00")

func dataPubsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataPubsJson,
		"data/pubs.json",
	)
}

func dataPubsJson() (*asset, error) {
	bytes, err := dataPubsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/pubs.json", size: 2548, mode: os.FileMode(420), modTime: time.Unix(1528538631, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/geo.json": dataGeoJson,
	"data/inventory.json": dataInventoryJson,
	"data/locales.json": dataLocalesJson,
	"data/pubs.json": dataPubsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"geo.json": &bintree{dataGeoJson, map[string]*bintree{}},
		"inventory.json": &bintree{dataInventoryJson, map[string]*bintree{}},
		"locales.json": &bintree{dataLocalesJson, map[string]*bintree{}},
		"pubs.json": &bintree{dataPubsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

