// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/geo/proto/geo.proto

package geo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The latitude and longitude of the current location.
type Request struct {
	Lat                  float32  `protobuf:"fixed32,1,opt,name=lat" json:"lat,omitempty"`
	Lon                  float32  `protobuf:"fixed32,2,opt,name=lon" json:"lon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_geo_0f0798665ffc04c8, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Request) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type Result struct {
	PubIds               []string `protobuf:"bytes,1,rep,name=pubIds" json:"pubIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_geo_0f0798665ffc04c8, []int{1}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetPubIds() []string {
	if m != nil {
		return m.PubIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "geo.Request")
	proto.RegisterType((*Result)(nil), "geo.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeoClient is the client API for Geo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoClient interface {
	// Finds the pubs contained nearby the current lat/lon.
	Nearby(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
}

type geoClient struct {
	cc *grpc.ClientConn
}

func NewGeoClient(cc *grpc.ClientConn) GeoClient {
	return &geoClient{cc}
}

func (c *geoClient) Nearby(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/geo.Geo/Nearby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoServer is the server API for Geo service.
type GeoServer interface {
	// Finds the pubs contained nearby the current lat/lon.
	Nearby(context.Context, *Request) (*Result, error)
}

func RegisterGeoServer(s *grpc.Server, srv GeoServer) {
	s.RegisterService(&_Geo_serviceDesc, srv)
}

func _Geo_Nearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServer).Nearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.Geo/Nearby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServer).Nearby(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Geo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geo.Geo",
	HandlerType: (*GeoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nearby",
			Handler:    _Geo_Nearby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/geo/proto/geo.proto",
}

func init() { proto.RegisterFile("services/geo/proto/geo.proto", fileDescriptor_geo_0f0798665ffc04c8) }

var fileDescriptor_geo_0f0798665ffc04c8 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0x4f, 0xcd, 0xd7, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x07, 0xb1,
	0xf4, 0xc0, 0x2c, 0x21, 0xe6, 0xf4, 0xd4, 0x7c, 0x25, 0x5d, 0x2e, 0xf6, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0x9c, 0xc4, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xa6,
	0x20, 0x10, 0x13, 0x2c, 0x92, 0x9f, 0x27, 0xc1, 0x04, 0x15, 0xc9, 0xcf, 0x53, 0x52, 0xe0, 0x62,
	0x0b, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0x28, 0x4d, 0xf2, 0x4c, 0x29,
	0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x0c, 0x82, 0xf2, 0x8c, 0xb4, 0xb8, 0x98, 0xdd, 0x53, 0xf3,
	0x85, 0x94, 0xb9, 0xd8, 0xfc, 0x52, 0x13, 0x8b, 0x92, 0x2a, 0x85, 0x78, 0xf4, 0x40, 0x56, 0x42,
	0x2d, 0x91, 0xe2, 0x86, 0xf2, 0x40, 0x66, 0x24, 0xb1, 0x81, 0x1d, 0x62, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xc8, 0x41, 0xbe, 0xf5, 0xa8, 0x00, 0x00, 0x00,
}
